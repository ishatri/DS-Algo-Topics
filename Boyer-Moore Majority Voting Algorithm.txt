The Boyer-Moore voting algorithm is one of the popular optimal a
lgorithms which is used to find the majority element among the given elements that have more than N/ 2 occurrences.
This works perfectly fine for finding the majority element which takes 2 traversals over the given elements, 
which works in O(N) time complexity and O(1) space complexity.


This algorithm works on the fact that if an element occurs more than N/2 times, it means that the remaining elements other than this would definitely 
be less than N/2. 
So let us check the proceeding of the algorithm.

First, choose a candidate from the given set of elements if it is the same as the candidate element, increase the votes.
Otherwise, decrease the votes if votes become 0, select another new element as the new candidate.

Steps to implement the algorithm :
Step 1 – Find a candidate with the majority –

Initialize a variable say i ,votes = 0, candidate =-1 
Traverse through the array using for loop
If votes = 0, choose the candidate = arr[i] , make votes=1.
else if the current element is the same as the candidate increment votes
else decrement votes.
Step 2 – Check if the candidate has more than N/2 votes –

Initialize a variable count =0 and increment count if it is the same as the candidate.
If the count is >N/2, return the candidate.
else return -1.


class Solution {
public:
    vector<int> majorityElement(vector<int>& arr) {
        int n = arr.size(), check = floor(n/3);
        
        int c1 = 0, c2 = 0, element1 = INT_MAX, element2 = INT_MAX; 
        
        for(int i : arr){
            if(element1 == i) c1++;
            else if(element2 == i) c2++;
            else if(c1 == 0) element1 = i, c1 = 1;
            else if(c2 == 0) element2 = i, c2 = 1;
            else c1--, c2--;
        }
        
        vector<int> ans;
        c1 = 0, c2 = 0;
        
        for(int i : arr){
            if(i == element1) c1++;
            else if(i == element2) c2++;
        }
        
        if(element1 != INT_MAX && c1 > check) ans.emplace_back(element1);
        if(element2 != INT_MAX && c2 > check) ans.emplace_back(element2);
        
        return ans;
    }
};
